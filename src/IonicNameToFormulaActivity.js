import React, { useState, useRef } from 'react';
import PeriodicTable from './PeriodicTable';
import PolyatomicIonReference from './PolyatomicIonReference';

// Demo problems for Ionic Name to Formula
function getRandomIonicNameToFormulaProblem() {
  const problems = [
    // Alkali metals (Group 1)
    { name: 'Lithium fluoride', answer: 'LiF', explanation: '' },
    { name: 'Rubidium fluoride', answer: 'RbF', explanation: '' },
    { name: 'Rubidium chloride', answer: 'RbCl', explanation: '' },
    { name: 'Rubidium bromide', answer: 'RbBr', explanation: '' },
    { name: 'Rubidium iodide', answer: 'RbI', explanation: '' },
    { name: 'Rubidium oxide', answer: 'Rb‚ÇÇO', explanation: '' },
    { name: 'Rubidium sulfide', answer: 'Rb‚ÇÇS', explanation: '' },
    { name: 'Rubidium nitride', answer: 'Rb‚ÇÉN', explanation: '' },
    { name: 'Cesium fluoride', answer: 'CsF', explanation: '' },
    { name: 'Cesium chloride', answer: 'CsCl', explanation: '' },
    { name: 'Cesium bromide', answer: 'CsBr', explanation: '' },
    { name: 'Cesium iodide', answer: 'CsI', explanation: '' },
    { name: 'Cesium oxide', answer: 'Cs‚ÇÇO', explanation: '' },
    { name: 'Cesium sulfide', answer: 'Cs‚ÇÇS', explanation: '' },
    { name: 'Cesium nitride', answer: 'Cs‚ÇÉN', explanation: '' },
    { name: 'Francium fluoride', answer: 'FrF', explanation: '' },
    { name: 'Francium chloride', answer: 'FrCl', explanation: '' },
    { name: 'Francium bromide', answer: 'FrBr', explanation: '' },
    { name: 'Francium iodide', answer: 'FrI', explanation: '' },
    { name: 'Francium oxide', answer: 'Fr‚ÇÇO', explanation: '' },
    { name: 'Francium sulfide', answer: 'Fr‚ÇÇS', explanation: '' },
    { name: 'Francium nitride', answer: 'Fr‚ÇÉN', explanation: '' },
    { name: 'Lithium chloride', answer: 'LiCl', explanation: '' },
    { name: 'Lithium bromide', answer: 'LiBr', explanation: '' },
    { name: 'Lithium iodide', answer: 'LiI', explanation: '' },
    { name: 'Lithium oxide', answer: 'Li‚ÇÇO', explanation: '' },
    { name: 'Lithium sulfide', answer: 'Li‚ÇÇS', explanation: '' },
    { name: 'Lithium nitride', answer: 'Li‚ÇÉN', explanation: '' },
    { name: 'Sodium fluoride', answer: 'NaF', explanation: '' },
    { name: 'Sodium chloride', answer: 'NaCl', explanation: '' },
    { name: 'Sodium bromide', answer: 'NaBr', explanation: '' },
    { name: 'Sodium iodide', answer: 'NaI', explanation: '' },
    { name: 'Sodium oxide', answer: 'Na‚ÇÇO', explanation: '' },
    { name: 'Sodium sulfide', answer: 'Na‚ÇÇS', explanation: '' },
    { name: 'Sodium nitride', answer: 'Na‚ÇÉN', explanation: '' },
    { name: 'Potassium fluoride', answer: 'KF', explanation: '' },
    { name: 'Potassium chloride', answer: 'KCl', explanation: '' },
    { name: 'Potassium bromide', answer: 'KBr', explanation: '' },
    { name: 'Potassium iodide', answer: 'KI', explanation: '' },
    { name: 'Potassium oxide', answer: 'K‚ÇÇO', explanation: '' },
    { name: 'Potassium sulfide', answer: 'K‚ÇÇS', explanation: '' },
    { name: 'Potassium nitride', answer: 'K‚ÇÉN', explanation: '' },
    // Alkaline earth metals (Group 2)
    { name: 'Radium fluoride', answer: 'RaF‚ÇÇ', explanation: '' },
    { name: 'Radium chloride', answer: 'RaCl‚ÇÇ', explanation: '' },
    { name: 'Radium bromide', answer: 'RaBr‚ÇÇ', explanation: '' },
    { name: 'Radium iodide', answer: 'RaI‚ÇÇ', explanation: '' },
    { name: 'Radium oxide', answer: 'RaO', explanation: '' },
    { name: 'Radium sulfide', answer: 'RaS', explanation: '' },
    { name: 'Radium nitride', answer: 'Ra‚ÇÉN‚ÇÇ', explanation: '' },
    { name: 'Magnesium fluoride', answer: 'MgF‚ÇÇ', explanation: '' },
    { name: 'Magnesium chloride', answer: 'MgCl‚ÇÇ', explanation: '' },
    { name: 'Magnesium bromide', answer: 'MgBr‚ÇÇ', explanation: '' },
    { name: 'Magnesium iodide', answer: 'MgI‚ÇÇ', explanation: '' },
    { name: 'Magnesium oxide', answer: 'MgO', explanation: '' },
    { name: 'Magnesium sulfide', answer: 'MgS', explanation: '' },
    { name: 'Magnesium nitride', answer: 'Mg‚ÇÉN‚ÇÇ', explanation: '' },
    { name: 'Calcium fluoride', answer: 'CaF‚ÇÇ', explanation: '' },
    { name: 'Calcium chloride', answer: 'CaCl‚ÇÇ', explanation: '' },
    { name: 'Calcium bromide', answer: 'CaBr‚ÇÇ', explanation: '' },
    { name: 'Calcium iodide', answer: 'CaI‚ÇÇ', explanation: '' },
    { name: 'Calcium oxide', answer: 'CaO', explanation: '' },
    { name: 'Calcium sulfide', answer: 'CaS', explanation: '' },
    { name: 'Calcium nitride', answer: 'Ca‚ÇÉN‚ÇÇ', explanation: '' },
    { name: 'Barium fluoride', answer: 'BaF‚ÇÇ', explanation: '' },
    { name: 'Barium chloride', answer: 'BaCl‚ÇÇ', explanation: '' },
    { name: 'Barium bromide', answer: 'BaBr‚ÇÇ', explanation: '' },
    { name: 'Barium iodide', answer: 'BaI‚ÇÇ', explanation: '' },
    { name: 'Barium oxide', answer: 'BaO', explanation: '' },
    { name: 'Barium sulfide', answer: 'BaS', explanation: '' },
    { name: 'Barium nitride', answer: 'Ba‚ÇÉN‚ÇÇ', explanation: '' },
    // Aluminum (Group 13)
    { name: 'Aluminum fluoride', answer: 'AlF‚ÇÉ', explanation: '' },
    { name: 'Aluminum chloride', answer: 'AlCl‚ÇÉ', explanation: '' },
    { name: 'Aluminum bromide', answer: 'AlBr‚ÇÉ', explanation: '' },
    { name: 'Aluminum iodide', answer: 'AlI‚ÇÉ', explanation: '' },
    { name: 'Aluminum oxide', answer: 'Al‚ÇÇO‚ÇÉ', explanation: '' },
    { name: 'Aluminum sulfide', answer: 'Al‚ÇÇS‚ÇÉ', explanation: '' },
    { name: 'Aluminum nitride', answer: 'AlN', explanation: '' },
    // Polyatomic ions
    { name: 'Sodium sulfate', answer: 'Na‚ÇÇSO‚ÇÑ', explanation: 'Sodium is Na‚Å∫, sulfate is SO‚ÇÑ¬≤‚Åª. Need 2 Na‚Å∫ for each SO‚ÇÑ¬≤‚Åª.' },
    { name: 'Potassium nitrate', answer: 'KNO‚ÇÉ', explanation: 'Potassium is K‚Å∫, nitrate is NO‚ÇÉ‚Åª.' },
    { name: 'Calcium carbonate', answer: 'CaCO‚ÇÉ', explanation: 'Calcium is Ca¬≤‚Å∫, carbonate is CO‚ÇÉ¬≤‚Åª.' },
    { name: 'Ammonium chloride', answer: 'NH‚ÇÑCl', explanation: 'Ammonium is NH‚ÇÑ‚Å∫, chloride is Cl‚Åª.' },
    { name: 'Magnesium phosphate', answer: 'Mg‚ÇÉ(PO‚ÇÑ)‚ÇÇ', explanation: 'Magnesium is Mg¬≤‚Å∫, phosphate is PO‚ÇÑ¬≥‚Åª. Need 3 Mg¬≤‚Å∫ for 2 PO‚ÇÑ¬≥‚Åª.' },
    { name: 'Aluminum hydroxide', answer: 'Al(OH)‚ÇÉ', explanation: 'Aluminum is Al¬≥‚Å∫, hydroxide is OH‚Åª. Need 3 OH‚Åª for each Al¬≥‚Å∫.' },
    { name: 'Calcium acetate', answer: 'Ca(C‚ÇÇH‚ÇÉO‚ÇÇ)‚ÇÇ', explanation: 'Calcium is Ca¬≤‚Å∫, acetate is C‚ÇÇH‚ÇÉO‚ÇÇ‚Åª. Need 2 acetates for each Ca¬≤‚Å∫.' },
    { name: 'Potassium permanganate', answer: 'KMnO‚ÇÑ', explanation: 'Potassium is K‚Å∫, permanganate is MnO‚ÇÑ‚Åª.' },
    { name: 'Sodium bicarbonate', answer: 'NaHCO‚ÇÉ', explanation: 'Sodium is Na‚Å∫, bicarbonate is HCO‚ÇÉ‚Åª.' },
    { name: 'Ammonium sulfate', answer: '(NH‚ÇÑ)‚ÇÇSO‚ÇÑ', explanation: 'Ammonium is NH‚ÇÑ‚Å∫, sulfate is SO‚ÇÑ¬≤‚Åª. Need 2 NH‚ÇÑ‚Å∫ for each SO‚ÇÑ¬≤‚Åª.' },
    { name: 'Iron(III) nitrate', answer: 'Fe(NO‚ÇÉ)‚ÇÉ', explanation: 'Iron(III) is Fe¬≥‚Å∫, nitrate is NO‚ÇÉ‚Åª. Need 3 nitrates for each Fe¬≥‚Å∫.' },
    { name: 'Copper(II) sulfate', answer: 'CuSO‚ÇÑ', explanation: 'Copper(II) is Cu¬≤‚Å∫, sulfate is SO‚ÇÑ¬≤‚Åª.' },
    { name: 'Barium chromate', answer: 'BaCrO‚ÇÑ', explanation: 'Barium is Ba¬≤‚Å∫, chromate is CrO‚ÇÑ¬≤‚Åª.' },
    { name: 'Lead(II) acetate', answer: 'Pb(C‚ÇÇH‚ÇÉO‚ÇÇ)‚ÇÇ', explanation: 'Lead(II) is Pb¬≤‚Å∫, acetate is C‚ÇÇH‚ÇÉO‚ÇÇ‚Åª.' },
  ];
  return problems[Math.floor(Math.random()*problems.length)];
}

export default function IonicNameToFormulaActivity({ onBack, onPeriodicTable }) {
  const [problem, setProblem] = useState(getRandomIonicNameToFormulaProblem());
  const [input, setInput] = useState('');
  const [feedback, setFeedback] = useState('');
  const inputRef = useRef(null);
  const [showTable, setShowTable] = useState(false);
  const [showPolyatomic, setShowPolyatomic] = useState(false);

  function insertSubscript(sub) {
    const el = inputRef.current;
    if (!el) return;
    const start = el.selectionStart;
    const end = el.selectionEnd;
    const newValue = input.slice(0, start) + sub + input.slice(end);
    setInput(newValue);
    setTimeout(() => {
      el.focus();
      el.setSelectionRange(start + 1, start + 1);
    }, 0);
  }

  function handleSubmit(e) {
    e.preventDefault();
    if (input.trim().replace(/\s/g,'').toLowerCase() === problem.answer.replace(/\s/g,'').toLowerCase()) {
      setFeedback('‚úÖ Correct!');
    } else {
      let msg = '‚ùå Not quite.';
      if (problem.explanation) {
        msg += ' Explanation: ' + problem.explanation;
      }
      msg += '\n\uD83D\uDCA1 Tip: For ionic compounds, write the cation (metal) first, then the anion (nonmetal or polyatomic ion). Balance the charges so the total is neutral. Use the Polyatomic Ion Reference if needed!';
      setFeedback(msg);
    }
  }

  function handleNext() {
    setProblem(getRandomIonicNameToFormulaProblem());
    setInput('');
    setFeedback('');
  }

  return (
    <div className="center-container fade-in slide-up" style={{ position: 'relative', overflow: 'hidden' }}>
      <span className="floating-chem-icon" style={{ left: '8vw', top: '12vh', fontSize: '2.2em', animationDelay: '1.2s' }}>üß™</span>
      <div className="glass-card pop-in">
        <h2 className="ptable-title">Ionic Name ‚Üí Formula Activity</h2>
        <div style={{ margin: '20px 0', fontWeight: 600, fontSize: '1.13em' }}>Name: <span style={{ color: 'var(--accent)', fontWeight: 700 }}>{problem.name}</span></div>
        <form onSubmit={handleSubmit}>
          <input
            className="glow-input"
            value={input}
            onChange={e => setInput(e.target.value)}
            placeholder="Type the formula here"
            ref={inputRef}
            style={{ width: '100%', maxWidth: 420 }}
          />
          <div className="subscript-btn-row">
            {['‚ÇÄ','‚ÇÅ','‚ÇÇ','‚ÇÉ','‚ÇÑ','‚ÇÖ','‚ÇÜ','‚Çá','‚Çà','‚Çâ'].map((sub, idx) => (
              <button
                key={sub}
                type="button"
                className="subscript-btn"
                onClick={() => insertSubscript(sub)}
                tabIndex={-1}
              >{sub}</button>
            ))}
          </div>
          <button className="ptable-btn" type="submit" style={{ width: '100%', marginBottom: 6 }}>Submit</button>
        </form>
        {feedback && (
          <div className={feedback.startsWith('‚úÖ') ? 'feedback-correct' : 'feedback-incorrect'} style={{ whiteSpace: 'pre-line', fontSize: '1.08em', borderRadius: 16, margin: '16px 0', padding: '18px 16px', textAlign: 'left', maxWidth: 420, width: '100%', boxSizing: 'border-box', background: feedback.startsWith('‚úÖ') ? undefined : 'linear-gradient(90deg,#ff5ca7 0,#a259ec 100%)', color: feedback.startsWith('‚úÖ') ? undefined : '#fff', boxShadow: feedback.startsWith('‚úÖ') ? undefined : '0 2px 16px #a259ec55' }}>
            {feedback}
          </div>
        )}
        <button className="ptable-btn" onClick={handleNext}>Try Another</button>
        <button className="back-btn" onClick={onBack}>Back</button>
      </div>
    </div>
  );
}
