{"version":3,"file":"static/js/996.0fe3a122.chunk.js","mappings":"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","sources":["ShortHandConfigActivity.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './ShortHandConfigActivity.css';\r\nimport {\r\n  configToSuperscript,\r\n  normalizeIndividualToken,\r\n  FeedbackVisual,\r\n  IS_VALID_SUBSHELL_REGEX,\r\n  IS_NOBLE_GAS_REGEX\r\n} from './ActivityUtils'; // Import shared utilities\r\n\r\n// Utility to reorder orbitals in a configuration string to s-p-d-f order\r\nfunction reorderOrbitals(config) {\r\n  // Split config into tokens (e.g., [Ne], 3s2, 3p6, etc.)\r\n  const tokens = config.split(/\\s+/);\r\n  const core = tokens[0].startsWith('[') ? tokens.shift() : null;\r\n  // Group by orbital type\r\n  const s = [], p = [], d = [], f = [], other = [];\r\n  tokens.forEach(token => {\r\n    if (/s\\d+$/.test(token)) s.push(token);\r\n    else if (/p\\d+$/.test(token)) p.push(token);\r\n    else if (/d\\d+$/.test(token)) d.push(token);\r\n    else if (/f\\d+$/.test(token)) f.push(token);\r\n    else other.push(token);\r\n  });\r\n  const ordered = [...s, ...p, ...d, ...f, ...other];\r\n  return [core, ...ordered].filter(Boolean).join(' ');\r\n}\r\n\r\n// --- ENSURE ALL CONFIGURATIONS IN ELEMENTS ARE s p d f ORDER ---\r\nconst ELEMENTS = [\r\n  { element: 'H', atomicNumber: 1, configuration: reorderOrbitals('1s1') },\r\n  { element: 'He', atomicNumber: 2, configuration: reorderOrbitals('1s2') },\r\n  { element: 'Li', atomicNumber: 3, configuration: reorderOrbitals('[He] 2s1') },\r\n  { element: 'Be', atomicNumber: 4, configuration: reorderOrbitals('[He] 2s2') },\r\n  { element: 'B', atomicNumber: 5, configuration: reorderOrbitals('[He] 2s2 2p1') },\r\n  { element: 'C', atomicNumber: 6, configuration: reorderOrbitals('[He] 2s2 2p2') },\r\n  { element: 'N', atomicNumber: 7, configuration: reorderOrbitals('[He] 2s2 2p3') },\r\n  { element: 'O', atomicNumber: 8, configuration: reorderOrbitals('[He] 2s2 2p4') },\r\n  { element: 'F', atomicNumber: 9, configuration: reorderOrbitals('[He] 2s2 2p5') },\r\n  { element: 'Ne', atomicNumber: 10, configuration: reorderOrbitals('[He] 2s2 2p6') },\r\n  { element: 'Na', atomicNumber: 11, configuration: reorderOrbitals('[Ne] 3s1') },\r\n  { element: 'Mg', atomicNumber: 12, configuration: reorderOrbitals('[Ne] 3s2') },\r\n  { element: 'Al', atomicNumber: 13, configuration: reorderOrbitals('[Ne] 3s2 3p1') },\r\n  { element: 'Si', atomicNumber: 14, configuration: reorderOrbitals('[Ne] 3s2 3p2') },\r\n  { element: 'P', atomicNumber: 15, configuration: reorderOrbitals('[Ne] 3s2 3p3') },\r\n  { element: 'S', atomicNumber: 16, configuration: reorderOrbitals('[Ne] 3s2 3p4') },\r\n  { element: 'Cl', atomicNumber: 17, configuration: reorderOrbitals('[Ne] 3s2 3p5') },\r\n  { element: 'Ar', atomicNumber: 18, configuration: reorderOrbitals('[Ne] 3s2 3p6') },\r\n  { element: 'K', atomicNumber: 19, configuration: reorderOrbitals('[Ar] 4s1') },\r\n  { element: 'Ca', atomicNumber: 20, configuration: reorderOrbitals('[Ar] 4s2') },\r\n  { element: 'Sc', atomicNumber: 21, configuration: reorderOrbitals('[Ar] 3d1 4s2') },\r\n  { element: 'Ti', atomicNumber: 22, configuration: reorderOrbitals('[Ar] 3d2 4s2') },\r\n  { element: 'V', atomicNumber: 23, configuration: reorderOrbitals('[Ar] 3d3 4s2') },\r\n  { element: 'Mn', atomicNumber: 25, configuration: reorderOrbitals('[Ar] 3d5 4s2') },\r\n  { element: 'Fe', atomicNumber: 26, configuration: reorderOrbitals('[Ar] 3d6 4s2') },\r\n  { element: 'Co', atomicNumber: 27, configuration: reorderOrbitals('[Ar] 3d7 4s2') },\r\n  { element: 'Ni', atomicNumber: 28, configuration: reorderOrbitals('[Ar] 3d8 4s2') },\r\n  { element: 'Zn', atomicNumber: 30, configuration: reorderOrbitals('[Ar] 3d10 4s2') },\r\n  { element: 'Br', atomicNumber: 35, configuration: reorderOrbitals('[Ar] 3d10 4s2 4p5') },\r\n  { element: 'Kr', atomicNumber: 36, configuration: reorderOrbitals('[Ar] 3d10 4s2 4p6') },\r\n  { element: 'Sn', atomicNumber: 50, configuration: reorderOrbitals('[Kr] 4d10 5s2 5p2') },\r\n  { element: 'I', atomicNumber: 53, configuration: reorderOrbitals('[Kr] 4d10 5s2 5p5') },\r\n  { element: 'Xe', atomicNumber: 54, configuration: reorderOrbitals('[Kr] 4d10 5s2 5p6') },\r\n  { element: 'Hg', atomicNumber: 80, configuration: reorderOrbitals('[Xe] 4f14 5d10 6s2') },\r\n  { element: 'Pb', atomicNumber: 82, configuration: reorderOrbitals('[Xe] 4f14 5d10 6s2 6p2') }\r\n];\r\n\r\nfunction shuffle(array) {\r\n  const arr = [...array];\r\n  for (let i = arr.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    [arr[i], arr[j]] = [arr[j], arr[i]];\r\n  }\r\n  return arr;\r\n}\r\n\r\nconst QUESTION_TYPES = [\r\n  'element-to-config', // Given element, pick config\r\n  'config-to-element', // Given config, pick element\r\n  'fill-in-blank'      // Given element, type config\r\n];\r\n\r\nfunction getRandomQuestionType(usedTypes) {\r\n  // Try to rotate types for variety\r\n  const unused = QUESTION_TYPES.filter(t => !usedTypes.includes(t));\r\n  if (unused.length > 0) return unused[Math.floor(Math.random() * unused.length)];\r\n  return QUESTION_TYPES[Math.floor(Math.random() * QUESTION_TYPES.length)];\r\n}\r\n\r\nfunction getRandomElement(remaining) {\r\n  return remaining[Math.floor(Math.random() * remaining.length)];\r\n}\r\n\r\nfunction getConstructiveFeedback(q, userAnswer, isCorrect) {\r\n  if (isCorrect) {\r\n    return {\r\n      type: 'correct',\r\n      userAnswer,\r\n      message: q.type === 'element-to-config'\r\n        ? 'Great job! Remember: Use the noble gas core closest to but less than the atomic number, then fill the remaining electrons in order.'\r\n        : q.type === 'config-to-element'\r\n        ? 'Correct! To identify the element, count the total electrons in the configuration or look for the highest energy subshell.'\r\n        : 'Excellent! Double-check your spacing and subshell order for full credit on exams.',\r\n      correct: q.correct,\r\n      tip: null,\r\n      missing: [],\r\n      extra: [],\r\n      howTo: []\r\n    };\r\n  }\r\n\r\n  if (q.type === 'config-to-element') {\r\n    return {\r\n      type: 'incorrect',\r\n      userAnswer,\r\n      message: 'Incorrect.',\r\n      correct: q.correct,\r\n      tip: 'Count the total electrons in the configuration, or look for the highest energy subshell to identify the element. The periodic table can help!',\r\n      missing: [],\r\n      extra: [],\r\n      howTo: []\r\n    };\r\n  }\r\n\r\n  const originalCorrectAnswer = q.correct;\r\n  const correctTokens = originalCorrectAnswer.split(/\\s+/).filter(Boolean);\r\n  const rawUserTokens = userAnswer.trim().split(/\\s+/).filter(Boolean);\r\n  const normalizedCorrectTokensForComparison = correctTokens.map(normalizeIndividualToken);\r\n  const normalizedUserTokensForComparison = rawUserTokens.map(normalizeIndividualToken);\r\n  const missing = [];\r\n  const correctTokenSetForComparison = new Set(normalizedCorrectTokensForComparison);\r\n  normalizedCorrectTokensForComparison.forEach((normCorrectToken, index) => {\r\n    if (!normalizedUserTokensForComparison.includes(normCorrectToken)) {\r\n      missing.push(correctTokens[index]);\r\n    }\r\n  });\r\n  const userTokenIssues = [];\r\n  rawUserTokens.forEach(rawUserToken => {\r\n    const normalizedUserToken = normalizeIndividualToken(rawUserToken);\r\n    if (!correctTokenSetForComparison.has(normalizedUserToken)) {\r\n      let issue = '';\r\n      const displayToken = configToSuperscript(rawUserToken);\r\n      if (IS_NOBLE_GAS_REGEX.test(rawUserToken)) {\r\n        issue = `Noble gas core <code>${displayToken}</code> is not part of the correct configuration.`;\r\n      } else if (IS_VALID_SUBSHELL_REGEX.test(normalizeIndividualToken(rawUserToken))) {\r\n        issue = `Subshell <code>${displayToken}</code> is extra or incorrect.`;\r\n      } else {\r\n        issue = `<code>${displayToken}</code> is not a recognized noble gas core or a valid subshell format (e.g., 2s2, [Ar]).`;\r\n      }\r\n      userTokenIssues.push(issue);\r\n    }\r\n  });\r\n  let nobleGasCoreFromCorrect = '';\r\n  let nobleGasMatch = originalCorrectAnswer.match(IS_NOBLE_GAS_REGEX);\r\n  if (nobleGasMatch) nobleGasCoreFromCorrect = nobleGasMatch[0];\r\n  let howTo = [];\r\n  const remainingCorrectSubshells = correctTokens.filter(t => !IS_NOBLE_GAS_REGEX.test(t));\r\n  if (nobleGasCoreFromCorrect) {\r\n    howTo.push({\r\n      step: 1, text: 'Find the noble gas core:', code: nobleGasCoreFromCorrect,\r\n      explanation: 'This represents all electrons up to that noble gas.'\r\n    });\r\n    if (remainingCorrectSubshells.length > 0) {\r\n      howTo.push({ step: 2, text: 'Add the remaining subshells in order:', code: remainingCorrectSubshells, explanation: null });\r\n    }\r\n  } else {\r\n    if (remainingCorrectSubshells.length > 0) {\r\n      howTo.push({ step: 1, text: 'List all subshells in order:', code: remainingCorrectSubshells, explanation: null });\r\n    }\r\n  }\r\n  return {\r\n    type: 'incorrect', userAnswer, message: 'Incorrect. Review the details below:',\r\n    correct: originalCorrectAnswer,\r\n    tip: 'Always start with the noble gas core in brackets (if needed), then add the remaining electrons in s, p, d, f order. Ensure correct subshell format (e.g., 2s2, 3p5) and electron counts. Use the periodic table for help!',\r\n    missing, extra: userTokenIssues, howTo\r\n  };\r\n}\r\n\r\n// Generate plausible distractor configurations for a given element\r\nfunction generateDistractorConfigs(correctConfig, allConfigs) {\r\n  const distractors = new Set();\r\n  // 1. Wrong order (swap s and p, or p and d)\r\n  const tokens = correctConfig.split(/\\s+/);\r\n  const core = tokens[0].startsWith('[') ? tokens.shift() : null;\r\n  const s = [], p = [], d = [], f = [], other = [];\r\n  tokens.forEach(token => {\r\n    if (/s\\d+$/.test(token)) s.push(token);\r\n    else if (/p\\d+$/.test(token)) p.push(token);\r\n    else if (/d\\d+$/.test(token)) d.push(token);\r\n    else if (/f\\d+$/.test(token)) f.push(token);\r\n    else other.push(token);\r\n  });\r\n  // Swap s and p\r\n  if (p.length > 0) distractors.add([core, ...p, ...s, ...d, ...f, ...other].filter(Boolean).join(' '));\r\n  // Swap p and d\r\n  if (d.length > 0) distractors.add([core, ...s, ...d, ...p, ...f, ...other].filter(Boolean).join(' '));\r\n  // 2. Off-by-one errors (add or subtract 1 from a subshell)\r\n  tokens.forEach((token, idx) => {\r\n    const match = token.match(/^(\\d+[spdf])(\\d+)$/);\r\n    if (match) {\r\n      const n = parseInt(match[2], 10);\r\n      if (n > 1) {\r\n        const arr = [...tokens];\r\n        arr[idx] = match[1] + (n - 1);\r\n        distractors.add([core, ...arr].filter(Boolean).join(' '));\r\n      }\r\n      if (n < 14) {\r\n        const arr = [...tokens];\r\n        arr[idx] = match[1] + (n + 1);\r\n        distractors.add([core, ...arr].filter(Boolean).join(' '));\r\n      }\r\n    }\r\n  });\r\n  // 3. Use a config from another element with similar atomic number\r\n  for (let cfg of allConfigs) {\r\n    if (cfg !== correctConfig && !distractors.has(cfg)) {\r\n      distractors.add(cfg);\r\n      if (distractors.size >= 6) break;\r\n    }\r\n  }\r\n  // Remove the correct answer if present\r\n  distractors.delete(correctConfig);\r\n  // Return up to 3 distractors\r\n  return Array.from(distractors).slice(0, 3);\r\n}\r\n\r\n// Normalize a configuration string for answer checking\r\nfunction normalizeConfig(config) {\r\n  // Remove all whitespace, convert to s p d f order, remove superscripts, and ignore case\r\n  let str = config.replace(/\\s+/g, '');\r\n  // Separate noble gas core from the rest\r\n  let match = str.match(/^(\\[[^\\]]+\\])(.+)$/i);\r\n  let core = '', rest = '';\r\n  if (match) {\r\n    core = match[1].toUpperCase();\r\n    rest = match[2];\r\n  } else {\r\n    rest = str;\r\n  }\r\n  // Insert a space between core and rest for reorderOrbitals\r\n  let spaced = (core ? core + ' ' : '') + rest;\r\n  // Convert to s p d f order, remove superscripts, and ignore case\r\n  return reorderOrbitals(spaced)\r\n    .replace(/([spdf])([⁰¹²³⁴⁵⁶⁷⁸⁹\\d]+)/gi, (m, orb, num) => orb.toLowerCase() + num\r\n      .replace(/[⁰¹²³⁴⁵⁶⁷⁸⁹]/g, d => '0123456789'['⁰¹²³⁴⁵⁶⁷⁸⁹'.indexOf(d)]))\r\n    .replace(/\\s+/g, ' ')\r\n    .trim();\r\n}\r\n\r\nconst ShortHandConfigActivity = ({ onBack, onPeriodicTable, savedState, setSavedState }) => {\r\n  const [remainingElements, setRemainingElements] = useState(savedState?.remainingElements || shuffle(ELEMENTS));\r\n  const [usedElements, setUsedElements] = useState(savedState?.usedElements || []);\r\n  const [usedTypes, setUsedTypes] = useState(savedState?.usedTypes || []);\r\n  const [question, setQuestion] = useState(savedState?.question || null);\r\n  const [userAnswer, setUserAnswer] = useState(savedState?.userAnswer || '');\r\n  const [feedback, setFeedback] = useState(savedState?.feedback || null);\r\n  const [showFeedback, setShowFeedback] = useState(savedState?.showFeedback || false);\r\n\r\n  const inputRef = useRef(null);\r\n\r\n  const handleInsertOpenBracket = () => {\r\n    setUserAnswer(prev => prev + '[');\r\n    if (inputRef.current) {\r\n      inputRef.current.focus();\r\n    }\r\n  };\r\n\r\n  const handleInsertCloseBracket = () => {\r\n    setUserAnswer(prev => prev + ']');\r\n    if (inputRef.current) {\r\n      inputRef.current.focus();\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (setSavedState) {\r\n      setSavedState({ remainingElements, usedElements, usedTypes, question, userAnswer, feedback, showFeedback });\r\n    }\r\n  }, [remainingElements, usedElements, usedTypes, question, userAnswer, feedback, showFeedback]);\r\n\r\n  const generateQuestion = useCallback(() => {\r\n    let nextElements = remainingElements;\r\n    let nextUsed = usedElements;\r\n    let nextUsedTypes = usedTypes;\r\n    if (nextElements.length === 0) {\r\n      nextElements = shuffle(ELEMENTS);\r\n      nextUsed = [];\r\n      nextUsedTypes = [];\r\n    }\r\n    const el = getRandomElement(nextElements);\r\n    const qType = getRandomQuestionType(nextUsedTypes);\r\n    setRemainingElements(nextElements.filter(e => e !== el));\r\n    setUsedElements([...nextUsed, el]);\r\n    setUsedTypes([...nextUsedTypes, qType].slice(-QUESTION_TYPES.length));\r\n    let q = { type: qType, el };\r\n    if (qType === 'element-to-config') {\r\n      const correct = reorderOrbitals(el.configuration);\r\n      const allConfigs = ELEMENTS.map(e => reorderOrbitals(e.configuration));\r\n      const distractors = generateDistractorConfigs(correct, allConfigs);\r\n      const options = shuffle([\r\n        correct,\r\n        ...distractors\r\n      ]);\r\n      q.prompt = `What is the short hand electron configuration for ${el.element} (Atomic Number: ${el.atomicNumber})?`;\r\n      q.options = options;\r\n      q.correct = correct;\r\n    } else if (qType === 'config-to-element') {\r\n      const options = shuffle([\r\n        el.element,\r\n        ...shuffle(ELEMENTS.filter(e => e !== el)).slice(0, 3).map(e => e.element)\r\n      ]);\r\n      q.prompt = `Which element has the configuration: ${reorderOrbitals(el.configuration)}?`;\r\n      q.options = options;\r\n      q.correct = el.element;\r\n    } else {\r\n      q.prompt = `Type the short hand electron configuration for ${el.element} (Atomic Number: ${el.atomicNumber}):`;\r\n      q.correct = reorderOrbitals(el.configuration);\r\n    }\r\n    setQuestion(q);\r\n    setUserAnswer('');\r\n    setFeedback(null);\r\n    setShowFeedback(false);\r\n  }, [remainingElements, usedElements, usedTypes, setRemainingElements, setUsedElements, setUsedTypes, setQuestion, setUserAnswer, setFeedback, setShowFeedback]);\r\n\r\n  useEffect(() => {\r\n    if (!question) {\r\n      generateQuestion();\r\n    }\r\n  }, [question, generateQuestion]);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (!question) return;\r\n    let isCorrect = false;\r\n    if (question.type === 'fill-in-blank') {\r\n      isCorrect = normalizeConfig(userAnswer) === normalizeConfig(question.correct);\r\n    } else {\r\n      isCorrect = userAnswer === question.correct;\r\n    }\r\n    setFeedback(getConstructiveFeedback(question, userAnswer, isCorrect));\r\n    setShowFeedback(true);\r\n  };\r\n\r\n  const handleNext = () => {\r\n    generateQuestion();\r\n  };\r\n\r\n  return (\r\n    <div className=\"shc-activity-bg\">\r\n      <div className=\"shc-card\">\r\n        <h2 className=\"shc-title\">\r\n          <span role=\"img\" aria-label=\"shorthand\" className=\"shc-title-icon\">✍️</span>\r\n          Short Hand Electron Configuration\r\n        </h2>\r\n        {question && (\r\n          <div key={question.prompt + (showFeedback ? '-feedback' : '-question')} className=\"shc-question-animate\">\r\n            <form onSubmit={handleSubmit} className=\"shc-form\">\r\n              <div className=\"shc-prompt\">{question.prompt}</div>\r\n\r\n              {question.type === 'fill-in-blank' && (\r\n                <div className=\"shc-input-section\">\r\n                  <div className=\"shc-input-row\">\r\n                    <input\r\n                      type=\"text\"\r\n                      className=\"shc-input\"\r\n                      value={userAnswer}\r\n                      onChange={e => setUserAnswer(e.target.value)}\r\n                      disabled={showFeedback}\r\n                      autoFocus\r\n                      autoComplete=\"off\"\r\n                      placeholder=\"e.g. [Ne] 3s2 3p1\"\r\n                      aria-label=\"Electron configuration input\"\r\n                      ref={inputRef}\r\n                    />\r\n                  </div>\r\n                  <div className=\"shc-bracket-buttons-row\">\r\n                    <button type=\"button\" onClick={handleInsertOpenBracket} className=\"shc-bracket-button shc-bracket-button-open\">\r\n                      [\r\n                    </button>\r\n                    <button type=\"button\" onClick={handleInsertCloseBracket} className=\"shc-bracket-button shc-bracket-button-close\">\r\n                      ]\r\n                    </button>\r\n                  </div>\r\n                  <div className=\"shc-superscript-preview\">\r\n                    {userAnswer && configToSuperscript(userAnswer)}\r\n                  </div>\r\n                </div>\r\n              )}\r\n\r\n              {question.type === 'element-to-config' && question.options && (\r\n                <div className=\"shc-options\">\r\n                  {question.options.map((opt, idx) => (\r\n                    <button\r\n                      key={opt}\r\n                      type=\"button\"\r\n                      className={`shc-option-btn${userAnswer === opt ? ' selected' : ''}`}\r\n                      onClick={() => !showFeedback && setUserAnswer(opt)}\r\n                      disabled={showFeedback}\r\n                      style={{ animationDelay: `${0.15 + idx * 0.1}s` }}\r\n                    >\r\n                      {configToSuperscript(opt)}\r\n                    </button>\r\n                  ))}\r\n                </div>\r\n              )}\r\n\r\n              {question.type === 'config-to-element' && question.options && (\r\n                <div className=\"shc-options\">\r\n                  {question.options.map((opt, idx) => (\r\n                    <button\r\n                      key={opt}\r\n                      type=\"button\"\r\n                      className={`shc-option-btn shc-element-option-btn${userAnswer === opt ? ' selected' : ''}`}\r\n                      onClick={() => !showFeedback && setUserAnswer(opt)}\r\n                      disabled={showFeedback}\r\n                      style={{ animationDelay: `${0.15 + idx * 0.1}s` }}\r\n                    >\r\n                      {opt}\r\n                    </button>\r\n                  ))}\r\n                </div>\r\n              )}\r\n\r\n              {!showFeedback && (\r\n                <button type=\"submit\" className=\"shc-submit-btn\" disabled={!userAnswer}>\r\n                  Submit\r\n                </button>\r\n              )}\r\n            </form>\r\n          </div>\r\n        )}\r\n        {showFeedback && feedback && (\r\n          <FeedbackVisual feedback={feedback} configToSuperscript={configToSuperscript} />\r\n        )}\r\n        {showFeedback && (\r\n          <button type=\"button\" className=\"shc-next-btn shc-question-animate\" onClick={handleNext}>\r\n            Next\r\n          </button>\r\n        )}\r\n        <div className=\"shc-action-row\">\r\n          <button type=\"button\" className=\"shc-action-btn\" onClick={onPeriodicTable}>\r\n            Periodic Table\r\n          </button>\r\n          <button type=\"button\" className=\"shc-action-btn shc-back-btn\" onClick={onBack}>\r\n            Back\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nShortHandConfigActivity.propTypes = {\r\n  onBack: PropTypes.func.isRequired,\r\n  onPeriodicTable: PropTypes.func.isRequired,\r\n  savedState: PropTypes.object,\r\n  setSavedState: PropTypes.func\r\n};\r\n\r\nexport default ShortHandConfigActivity; "],"names":["reorderOrbitals","config","tokens","split","core","startsWith","shift","s","p","d","f","other","forEach","token","test","push","filter","Boolean","join","ELEMENTS","element","atomicNumber","configuration","shuffle","array","arr","i","length","j","Math","floor","random","QUESTION_TYPES","normalizeConfig","str","replace","match","rest","toUpperCase","m","orb","num","toLowerCase","indexOf","trim","_ref","onBack","onPeriodicTable","savedState","setSavedState","remainingElements","setRemainingElements","useState","usedElements","setUsedElements","usedTypes","setUsedTypes","question","setQuestion","userAnswer","setUserAnswer","feedback","setFeedback","showFeedback","setShowFeedback","inputRef","useRef","useEffect","generateQuestion","useCallback","nextElements","nextUsed","nextUsedTypes","el","remaining","qType","unused","t","includes","getRandomQuestionType","e","slice","q","type","correct","distractors","correctConfig","allConfigs","Set","add","idx","n","parseInt","cfg","has","size","delete","Array","from","generateDistractorConfigs","map","options","prompt","_jsx","className","children","_jsxs","role","onSubmit","preventDefault","isCorrect","message","tip","missing","extra","howTo","originalCorrectAnswer","correctTokens","rawUserTokens","normalizedCorrectTokensForComparison","normalizeIndividualToken","normalizedUserTokensForComparison","correctTokenSetForComparison","normCorrectToken","index","userTokenIssues","rawUserToken","normalizedUserToken","issue","displayToken","configToSuperscript","IS_NOBLE_GAS_REGEX","IS_VALID_SUBSHELL_REGEX","nobleGasCoreFromCorrect","nobleGasMatch","remainingCorrectSubshells","step","text","code","explanation","getConstructiveFeedback","value","onChange","target","disabled","autoFocus","autoComplete","placeholder","ref","onClick","handleInsertOpenBracket","prev","current","focus","handleInsertCloseBracket","opt","style","animationDelay","FeedbackVisual","handleNext"],"sourceRoot":""}