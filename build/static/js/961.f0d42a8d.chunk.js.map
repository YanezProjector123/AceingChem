{"version":3,"file":"static/js/961.f0d42a8d.chunk.js","mappings":"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","sources":["ElectronConfigExceptionsActivity.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './ShortHandConfigActivity.css'; // Reusing styles for now\r\nimport { configToSuperscript, FeedbackVisual } from './ActivityUtils';\r\n\r\n// Data: Elements with exceptional configurations\r\nconst EXCEPTION_ELEMENT_DATA = [\r\n  { \r\n    name: 'Chromium', \r\n    symbol: 'Cr', \r\n    atomicNumber: 24, \r\n    actualConfig: '[Ar] 4s1 3d5', \r\n    expectedConfig: '[Ar] 4s2 3d4',\r\n    reason: 'A half-filled d subshell (3d5) is more stable.' \r\n  },\r\n  { \r\n    name: 'Copper', \r\n    symbol: 'Cu', \r\n    atomicNumber: 29, \r\n    actualConfig: '[Ar] 4s1 3d10', \r\n    expectedConfig: '[Ar] 4s2 3d9',\r\n    reason: 'A completely filled d subshell (3d10) is more stable.' \r\n  },\r\n  { \r\n    name: 'Molybdenum', \r\n    symbol: 'Mo', \r\n    atomicNumber: 42, \r\n    actualConfig: '[Kr] 5s1 4d5', \r\n    expectedConfig: '[Kr] 5s2 4d4',\r\n    reason: 'A half-filled d subshell (4d5) is more stable.' \r\n  },\r\n  { \r\n    name: 'Silver', \r\n    symbol: 'Ag', \r\n    atomicNumber: 47, \r\n    actualConfig: '[Kr] 5s1 4d10', \r\n    expectedConfig: '[Kr] 5s2 4d9',\r\n    reason: 'A completely filled d subshell (4d10) is more stable.' \r\n  },\r\n  { \r\n    name: 'Gold', \r\n    symbol: 'Au', \r\n    atomicNumber: 79, \r\n    actualConfig: '[Xe] 6s1 4f14 5d10', \r\n    expectedConfig: '[Xe] 6s2 4f14 5d9',\r\n    reason: 'A completely filled d subshell (5d10) is more stable.' \r\n  },\r\n  { \r\n    name: 'Palladium', \r\n    symbol: 'Pd', \r\n    atomicNumber: 46, \r\n    actualConfig: '[Kr] 4d10', \r\n    expectedConfig: '[Kr] 5s2 4d8',\r\n    reason: 'A completely filled d subshell (4d10) and empty 5s is uniquely stable for Palladium.'\r\n  },\r\n  // Add more lanthanides/actinides or other tricky ones later if needed\r\n];\r\n\r\nfunction shuffleArray(array) {\r\n  const arr = [...array];\r\n  for (let i = arr.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    [arr[i], arr[j]] = [arr[j], arr[i]];\r\n  }\r\n  return arr;\r\n}\r\n\r\n// Generates feedback (can be enhanced for exceptions)\r\nfunction getFeedbackForException(correctElement, userAnswerSymbol, displayedConfig, questionType) {\r\n  const isCorrect = userAnswerSymbol === correctElement.symbol; // Assuming type 'config-to-element' for now\r\n  \r\n  if (isCorrect) {\r\n    return {\r\n      type: 'correct',\r\n      userAnswer: userAnswerSymbol,\r\n      message: `Correct! ${configToSuperscript(displayedConfig)} is the actual configuration for ${correctElement.name} (${correctElement.symbol}).`,\r\n      correct: correctElement.symbol,\r\n      tip: correctElement.reason || 'Well done! This is an important exception to remember.',\r\n      missing: [], extra: [], howTo: []\r\n    };\r\n  }\r\n  return {\r\n    type: 'incorrect',\r\n    userAnswer: userAnswerSymbol,\r\n    message: `Incorrect. You chose ${userAnswerSymbol}.`,\r\n    correct: correctElement.symbol,\r\n    tip: `${configToSuperscript(displayedConfig)} is the actual configuration for ${correctElement.name} (${correctElement.symbol}). ${correctElement.reason}`,\r\n    missing: [], extra: [],\r\n    howTo: [\r\n      { step: 1, text: 'Configuration given:', code: configToSuperscript(displayedConfig) },\r\n      { step: 2, text: 'Correct Element:', code: `${correctElement.name} (${correctElement.symbol})`, explanation: correctElement.reason }\r\n    ]\r\n  };\r\n}\r\n\r\n\r\nconst ElectronConfigExceptionsActivity = ({ onBack, onPeriodicTable, savedState, setSavedState }) => {\r\n  const [availableElements, setAvailableElements] = useState(\r\n    () => (savedState?.availableElements && savedState.availableElements.length > 0)\r\n           ? savedState.availableElements\r\n           : shuffleArray([...EXCEPTION_ELEMENT_DATA])\r\n  );\r\n  const [currentQuestion, setCurrentQuestion] = useState(() => savedState?.currentQuestion || null);\r\n  const [userAnswer, setUserAnswer] = useState(() => savedState?.userAnswer || '');\r\n  const [feedback, setFeedback] = useState(() => savedState?.feedback || null);\r\n  const [showFeedback, setShowFeedback] = useState(() => savedState?.showFeedback || false);\r\n\r\n  const generateQuestion = useCallback(() => {\r\n    let elementsToUse = availableElements;\r\n    if (elementsToUse.length === 0) {\r\n      elementsToUse = shuffleArray([...EXCEPTION_ELEMENT_DATA]); // Reshuffle if all used\r\n    }\r\n    const correctElement = elementsToUse[0];\r\n    setAvailableElements(elementsToUse.slice(1));\r\n\r\n    // For now, always ask: \"Which element has this actual configuration?\"\r\n    const displayedConfig = correctElement.actualConfig;\r\n    const questionType = 'config-to-element'; // Could be expanded later\r\n\r\n    // Generate distractors (other element symbols from the exception list or general list)\r\n    const otherExceptionSymbols = EXCEPTION_ELEMENT_DATA.filter(el => el.symbol !== correctElement.symbol).map(el => el.symbol);\r\n    const distractors = shuffleArray(otherExceptionSymbols).slice(0, 3); // Pick 3 other exception symbols\r\n    const options = shuffleArray([correctElement.symbol, ...distractors]);\r\n\r\n    setCurrentQuestion({\r\n      element: correctElement,\r\n      displayedConfig: displayedConfig,\r\n      questionType: questionType,\r\n      options: options,\r\n      correctSymbol: correctElement.symbol,\r\n      promptText: `Which element, known for its exceptional electron configuration, has the actual configuration:`\r\n    });\r\n    setUserAnswer('');\r\n    setFeedback(null);\r\n    setShowFeedback(false);\r\n  }, [availableElements]);\r\n\r\n  useEffect(() => {\r\n    if (!currentQuestion) {\r\n      generateQuestion();\r\n    }\r\n  }, [currentQuestion, generateQuestion]);\r\n  \r\n  useEffect(() => {\r\n    if (setSavedState) {\r\n        setSavedState({ availableElements, currentQuestion, userAnswer, feedback, showFeedback });\r\n    }\r\n  }, [availableElements, currentQuestion, userAnswer, feedback, showFeedback, setSavedState]);\r\n\r\n  const handleSubmit = () => {\r\n    if (!userAnswer || !currentQuestion) return;\r\n    const feedbackResult = getFeedbackForException(currentQuestion.element, userAnswer, currentQuestion.displayedConfig, currentQuestion.questionType);\r\n    setFeedback(feedbackResult);\r\n    setShowFeedback(true);\r\n  };\r\n\r\n  const handleNext = () => {\r\n    generateQuestion();\r\n  };\r\n\r\n  if (!currentQuestion) {\r\n    return <div style={{textAlign: 'center', color: 'white', marginTop: '30px'}}>Loading exception question...</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"shc-activity-bg\">\r\n      <div className=\"shc-card\">\r\n        <h2 className=\"shc-title\">\r\n          <span role=\"img\" aria-label=\"warning\" className=\"shc-title-icon\">⚠️</span>\r\n          Electron Configuration Exceptions\r\n        </h2>\r\n        \r\n        <div className=\"shc-form\">\r\n          <div className=\"shc-prompt\" style={{ marginBottom: '10px' }}>\r\n            {currentQuestion.promptText} <br />\r\n            <strong style={{ fontSize: '1.2em', marginTop: '8px', display: 'inline-block' }}>\r\n              {configToSuperscript(currentQuestion.displayedConfig)}\r\n            </strong>\r\n          </div>\r\n\r\n          <div className=\"shc-options\">\r\n            {currentQuestion.options.map((optionSymbol) => (\r\n              <button\r\n                key={optionSymbol}\r\n                type=\"button\"\r\n                className={`shc-option-btn ${userAnswer === optionSymbol ? 'selected' : ''}`}\r\n                onClick={() => !showFeedback && setUserAnswer(optionSymbol)}\r\n                disabled={showFeedback}\r\n              >\r\n                {optionSymbol}\r\n              </button>\r\n            ))}\r\n          </div>\r\n\r\n          {!showFeedback && (\r\n            <button \r\n              type=\"button\" \r\n              className=\"shc-submit-btn\" \r\n              onClick={handleSubmit} \r\n              disabled={!userAnswer}\r\n            >\r\n              Submit\r\n            </button>\r\n          )}\r\n        </div>\r\n\r\n        {showFeedback && feedback && (\r\n          <FeedbackVisual feedback={feedback} />\r\n        )}\r\n\r\n        {showFeedback && (\r\n          <button type=\"button\" className=\"shc-next-btn\" onClick={handleNext}>\r\n            Next Question\r\n          </button>\r\n        )}\r\n\r\n        <div className=\"shc-action-row\">\r\n          <button type=\"button\" className=\"shc-action-btn\" onClick={onPeriodicTable}>\r\n            Periodic Table\r\n          </button>\r\n          <button type=\"button\" className=\"shc-action-btn shc-back-btn\" onClick={onBack}>\r\n            Back to Topics\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nElectronConfigExceptionsActivity.propTypes = {\r\n  onBack: PropTypes.func.isRequired,\r\n  onPeriodicTable: PropTypes.func.isRequired,\r\n  savedState: PropTypes.object,\r\n  setSavedState: PropTypes.func\r\n};\r\n\r\nexport default ElectronConfigExceptionsActivity; "],"names":["EXCEPTION_ELEMENT_DATA","name","symbol","atomicNumber","actualConfig","expectedConfig","reason","shuffleArray","array","arr","i","length","j","Math","floor","random","_ref","onBack","onPeriodicTable","savedState","setSavedState","availableElements","setAvailableElements","useState","currentQuestion","setCurrentQuestion","userAnswer","setUserAnswer","feedback","setFeedback","showFeedback","setShowFeedback","generateQuestion","useCallback","elementsToUse","correctElement","slice","displayedConfig","distractors","filter","el","map","options","element","questionType","correctSymbol","promptText","useEffect","_jsx","className","children","_jsxs","role","style","marginBottom","fontSize","marginTop","display","configToSuperscript","optionSymbol","type","onClick","disabled","handleSubmit","feedbackResult","userAnswerSymbol","message","correct","tip","missing","extra","howTo","step","text","code","explanation","FeedbackVisual","handleNext","textAlign","color"],"sourceRoot":""}